/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DisplayUDP.java
 *
 * Created on Mar 27, 2012, 10:20:17 PM
 */
package edu.sg.nus.cs2105.assignment.reliableUDP.view;

import java.awt.event.ActionEvent;
import java.io.IOException;
import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;

import edu.sg.nus.cs2105.assignment.reliableUDP.controller.UDPClient;
import edu.sg.nus.cs2105.assignment.reliableUDP.controller.UDPServer;
import edu.sg.nus.cs2105.assignment.reliableUDP.event.Informable;

import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.InterfaceAddress;
import java.net.NetworkInterface;
import java.net.UnknownHostException;
import java.util.Enumeration;

/**
 *
 * @author liyilin
 */
public class DisplayUDP extends javax.swing.JFrame {

    /** Creates new form DisplayUDP */
    public DisplayUDP() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clientPanel = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        serverIpText = new javax.swing.JTextField();
        serverPortText = new javax.swing.JTextField();
        FilePathText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        responseText = new javax.swing.JTextArea();
        browseButton = new javax.swing.JButton();
        sendButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        serverPanel = new javax.swing.JPanel();
        clientIpText = new javax.swing.JTextField();
        clientPortText = new javax.swing.JTextField();
        receiverPath = new javax.swing.JTextField();
        setPathButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        serverStatus = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        clientPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientPanelMouseClicked(evt);
            }
        });
        clientPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clientPanelFocusGained(evt);
            }
        });

        serverIpText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                serverIpTextFocusLost(evt);
            }
        });

        serverPortText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverPortTextActionPerformed(evt);
            }
        });
        serverPortText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                serverPortTextFocusLost(evt);
            }
        });

        FilePathText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilePathTextActionPerformed(evt);
            }
        });
        FilePathText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                FilePathTextFocusLost(evt);
            }
        });

        responseText.setColumns(20);
        responseText.setRows(5);
        jScrollPane1.setViewportView(responseText);

        browseButton.setText("browse");
        browseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                browseButtonMouseClicked(evt);
            }
        });

        sendButton.setText("send");
        sendButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
					sendButtonMouseClicked(evt);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        jLabel1.setText("Server IP:");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setText("Server Port: ");
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setText("File Path: ");
        jLabel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(serverPortText)
                            .addComponent(serverIpText, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(FilePathText, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseButton))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(218, 218, 218)
                        .addComponent(sendButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverIpText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverPortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FilePathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        clientPanel.addTab("client", jPanel1);

        serverPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                serverPanelFocusGained(evt);
            }
        });

        clientIpText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                clientIpTextFocusLost(evt);
            }
        });

        clientPortText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                clientPortTextFocusLost(evt);
            }
        });

        receiverPath.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                receiverPathFocusLost(evt);
            }
        });

        setPathButton.setText("Path");
        setPathButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                setPathButtonMouseClicked(evt);
            }
        });

        runButton.setText("Run");
        runButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
					runButtonMouseClicked(evt);
				} catch (NumberFormatException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("IP:");
        jLabel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel5.setText("Port: ");
        jLabel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel6.setText("Path: ");
        jLabel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setViewportView(serverStatus);

        javax.swing.GroupLayout serverPanelLayout = new javax.swing.GroupLayout(serverPanel);
        serverPanel.setLayout(serverPanelLayout);
        serverPanelLayout.setHorizontalGroup(
            serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(serverPanelLayout.createSequentialGroup()
                        .addGroup(serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                            .addGroup(serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(serverPanelLayout.createSequentialGroup()
                                .addGap(136, 136, 136)
                                .addComponent(runButton))
                            .addComponent(clientPortText, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, serverPanelLayout.createSequentialGroup()
                                .addComponent(receiverPath, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setPathButton))
                            .addComponent(clientIpText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(serverPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                        .addGap(47, 47, 47))))
        );
        serverPanelLayout.setVerticalGroup(
            serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientIpText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(clientPortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setPathButton)
                    .addComponent(receiverPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        clientPanel.addTab("server", serverPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(clientPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(clientPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void serverPortTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverPortTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serverPortTextActionPerformed

    private void FilePathTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilePathTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FilePathTextActionPerformed

    private void serverIpTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_serverIpTextFocusLost
        serverIp = serverIpText.getText();
    }//GEN-LAST:event_serverIpTextFocusLost

    private void serverPortTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_serverPortTextFocusLost
        serverPort = serverPortText.getText();
    }//GEN-LAST:event_serverPortTextFocusLost

    private void FilePathTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FilePathTextFocusLost
        FilePath = FilePathText.getText();
    }//GEN-LAST:event_FilePathTextFocusLost

    private void browseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_browseButtonMouseClicked
        ActionEvent e = null;
        browse(e);
    }//GEN-LAST:event_browseButtonMouseClicked

    private void sendButtonMouseClicked(java.awt.event.MouseEvent evt) throws IOException {//GEN-FIRST:event_sendButtonMouseClicked
        responseText.setText(serverIp + "\n" + serverPort + "\n" + FilePath);
        UDPClient client = new UDPClient (FilePath, serverIp, serverPort){
  	       // This method is invoked when the worker is finished
  	       // its task
  	      @Override
  	      protected void done(){
  	                  
  	        responseText.append("File received, and surver stoped!\n");
  	      }
  	    };
        
 	client.setInformable(new Informable(){
	      @Override
	      public void messageChanged(String message){
	        serverStatus.append(message+"\n");
//	        textArea.append(message + "\n");
	      }
	    });
 	client.execute();
        
    }//GEN-LAST:event_sendButtonMouseClicked

    private void setPathButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_setPathButtonMouseClicked
        ActionEvent e = null;
        getPath(e);
    }//GEN-LAST:event_setPathButtonMouseClicked

    private void clientIpTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_clientIpTextFocusLost
        clientIp = clientIpText.getText();
    }//GEN-LAST:event_clientIpTextFocusLost

    private void clientPortTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_clientPortTextFocusLost
        clientPort = clientPortText.getText();
    }//GEN-LAST:event_clientPortTextFocusLost

    private void receiverPathFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_receiverPathFocusLost
        recPath = receiverPath.getText();
    }//GEN-LAST:event_receiverPathFocusLost

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed

    }//GEN-LAST:event_runButtonActionPerformed

    private void runButtonMouseClicked(java.awt.event.MouseEvent evt) throws NumberFormatException, IOException {//GEN-FIRST:event_runButtonMouseClicked
    	UDPServer server = new UDPServer(clientIp, Integer.parseInt(clientPort), recPath){
    	       // This method is invoked when the worker is finished
    	       // its task
    	      @Override
    	      protected void done(){
    	                  
    	        serverStatus.append("File received, and surver stoped!\n");
    	      }
    	    };;
    	Informable informable = new Informable(){
    	      @Override
    	      public void messageChanged(String message){
    	        serverStatus.append(message+"\n");
//    	        textArea.append(message + "\n");
    	      }
    	    };
    	server.setInformable(informable);
    	server.execute();
    }//GEN-LAST:event_runButtonMouseClicked

    private void clientPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_clientPanelFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_clientPanelFocusGained

    private void serverPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_serverPanelFocusGained
        try {
            
            // TODO add your handling code here:
            String[] ips = new String[10];
            int c = 0;
            String output = "The available IPs are: \n";
            for (
                                final Enumeration< NetworkInterface > interfaces =
                                    NetworkInterface.getNetworkInterfaces( );
                                interfaces.hasMoreElements( );
                            )
                            {
                                final NetworkInterface cur = interfaces.nextElement( );

                                if ( cur.isLoopback( ) )
                                {
                                    continue;
                                }

                                output += "interface " + cur.getName( ) +"\n";

                                for ( final InterfaceAddress addr : cur.getInterfaceAddresses( ) )
                                {
                                    final InetAddress inet_addr = addr.getAddress( );

                                    if ( !( inet_addr instanceof Inet4Address ) )
                                    {
                                        continue;
                                    }
                                    
                                    output += (c+": \n");
                                    output += (
                                        "  address: " + inet_addr.getHostAddress( ) +
                                        "/" + addr.getNetworkPrefixLength( )
                                    +"\n");

                                    output += (
                                        "  broadcast address: " +
                                            addr.getBroadcast( ).getHostAddress( )
                                    +"\n");
                                    ips[c++]=addr.getBroadcast( ).getHostAddress( );
                                }
                                serverStatus.setText(output);
                            }
        } catch (SocketException ex) {
            Logger.getLogger(DisplayUDP.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_serverPanelFocusGained

    private void clientPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientPanelMouseClicked
        // TODO add your handling code here:
         try {
            
            // TODO add your handling code here:
            String[] ips = new String[10];
            int c = 0;
            String output = "The available IPs are: \n";
            for (
                                final Enumeration< NetworkInterface > interfaces =
                                    NetworkInterface.getNetworkInterfaces( );
                                interfaces.hasMoreElements( );
                            )
                            {
                                final NetworkInterface cur = interfaces.nextElement( );

                                if ( cur.isLoopback( ) )
                                {
                                    continue;
                                }

                                output += "interface " + cur.getName( ) +"\n";

                                for ( final InterfaceAddress addr : cur.getInterfaceAddresses( ) )
                                {
                                    final InetAddress inet_addr = addr.getAddress( );

                                    if ( !( inet_addr instanceof Inet4Address ) )
                                    {
                                        continue;
                                    }
                                    
                                    output += (c+": \n");
                                    output += (
                                        "  address: " + inet_addr.getHostAddress( ) +
                                        "/" + addr.getNetworkPrefixLength( )
                                    +"\n");

                                    output += (
                                        "  broadcast address: " +
                                            addr.getBroadcast( ).getHostAddress( )
                                    +"\n");
                                    ips[c++]=addr.getBroadcast( ).getHostAddress( );
                                }
                                serverStatus.setText(output);
                            }
        } catch (SocketException ex) {
            Logger.getLogger(DisplayUDP.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clientPanelMouseClicked

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//
//            public void run() {
//                new DisplayUDP().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField FilePathText;
    private javax.swing.JButton browseButton;
    private javax.swing.JTextField clientIpText;
    private javax.swing.JTabbedPane clientPanel;
    private javax.swing.JTextField clientPortText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField receiverPath;
    private javax.swing.JTextArea responseText;
    private javax.swing.JButton runButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField serverIpText;
    private javax.swing.JPanel serverPanel;
    private javax.swing.JTextField serverPortText;
    private javax.swing.JTextArea serverStatus;
    private javax.swing.JButton setPathButton;
    // End of variables declaration//GEN-END:variables
private JFileChooser chooser;
    private String serverIp = null;
    private String serverPort = null;
    private String FilePath = null;
    private String clientIp = null;
    private String clientPort = null;
    private String recPath = null;

    public void browse(ActionEvent e) {
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select FIle");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (chooser.showOpenDialog(clientPanel) == JFileChooser.APPROVE_OPTION) {
            FilePath = chooser.getSelectedFile().getAbsolutePath();
            FilePathText.setText(FilePath);

        } else {
            System.out.println("No Selection ");
        }
    }

    public void getPath(ActionEvent e) {
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select Path");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        try {
            if (chooser.showOpenDialog(clientPanel) == JFileChooser.APPROVE_OPTION) {
                recPath = chooser.getSelectedFile().getCanonicalPath();
                receiverPath.setText(recPath);

            } else {
                System.out.println("No Selection ");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    public synchronized void getServerResponse(final String s){
    	System.out.println("Get responce fron controller"+s);
    	serverStatus.append(s);
//    	 new Thread(new Runnable()
//    	  {
//    	    SwingUtilities.invokeLater(new Runnable() 
//    	    {
//    	      public void run()
//    	      {
//    	    	  serverStatus.append(s);
//    	      }
//    	    });
//    	  }).start();
    }
    
    public synchronized void  getClientResponse(String s){
    	responseText.append(s);
    }
}
